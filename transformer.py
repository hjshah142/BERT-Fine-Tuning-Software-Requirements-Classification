# -*- coding: utf-8 -*-
"""Transformer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U2aBQpouVRqjMg13ehDg13rhOlZoTSmj

## Install tranfformer library
"""

!pip install transformers

!pip install tensorflow-gpu

# !pip install tensorflow

! nvidia-smi

"""BERT-base model that has 110 million parameters
## Import BERT Pre-trained Model and BERT Tokenizer
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import transformers
from transformers import AutoModel, BertTokenizerFast

# specify GPU
device = torch.device("cuda")

# import BERT-base pretrained model
bert = AutoModel.from_pretrained('bert-base-uncased', return_dict=False)

#model = BertModel.from_pretrained("bert-base-cased",)
# Load the BERT tokenizer
tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')

# sample data
text = ["The system shall refresh the display every 60 seconds.", 
        "The application shall match the color of the schema set forth by Department of Homeland Security."]

# encode text
sent_id = tokenizer.batch_encode_plus(text, padding=True)

# output
print(sent_id)

"""* Input ids:  dictionary of two items(sentences). Integer sequences of the input sentences.
*  Special tokens: integers 101 and 102 
*  Padding token : 0
*  Attention_mask: list of 1’s and 0’s. 
* Informs the model to pay attention to the tokens corresponding to the mask value of 1 and ignore the rest.

# Import datasets for fine-tuning
"""

script_dir = "/content/drive/MyDrive/Colab Notebooks"

import os
train_data_path =os.path.join(script_dir, "RequirementsData/requirements_tags.xlsx")
train_data_path

df_train = pd.read_excel(train_data_path)

df_train.head()

# split train dataset into train, validation and test sets
train_reqs, val_reqs, train_class, val_class = train_test_split(df_train['Requirements'], df_train['Req_type'], 
                                                                    random_state=2018, 
                                                                    test_size=0.2, 
                                                                stratify=df_train['Req_type'])

print(train_reqs.shape)
train_reqs.head()

# get length of all the messages in the train set
seq_len = [len(i.split()) for i in train_reqs]

pd.Series(seq_len).hist(bins = 12)

# Most of the requirments word lenght are between 12 to 18
# TODO use this to decide the max length

"""No need to give labels while fine tuning using pretrained  moldel to specific task based data"""

# tokenize and encode sequences in the training set
tokens_train = tokenizer.batch_encode_plus(
    train_reqs.tolist(),
    truncation=True,
    max_length = 25,
    padding =True

)

print(tokens_train['input_ids'][0])

# tokenize and encode sequences in the test set

#return_dict=False return_dict=False return_dict=False return_dict=False# tokenize and encode sequences in the validation set
tokens_val = tokenizer.batch_encode_plus(
    val_reqs.tolist(),
    truncation=True,
    max_length = 25,
    padding =True
    
)

# tokenize and encode sequences in the test set



# Convert Integer Sequences to Tensors

train_seq = torch.tensor(tokens_train['input_ids'])
train_mask = torch.tensor(tokens_train['attention_mask'])
train_y = torch.tensor(train_class.tolist())

val_seq = torch.tensor(tokens_val['input_ids'])
val_mask = torch.tensor(tokens_val['attention_mask'])
val_y = torch.tensor(val_class.tolist())

# creatr dataloader

from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler

#define a batch size
batch_size = 32

# wrap tensors
train_data = TensorDataset(train_seq, train_mask, train_y)

# sampler for sampling the data during training
train_sampler = RandomSampler(train_data)

# dataLoader for train set
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)

# wrap tensors
val_data = TensorDataset(val_seq, val_mask, val_y)

# sampler for sampling the data during training
val_sampler = SequentialSampler(val_data)

# dataLoader for validation set
val_dataloader = DataLoader(val_data, sampler = val_sampler, batch_size=batch_size)

# Train the model

# Function fine tuning the bert

"""# Freez bert parameters"""

# freeze all the parameters
for param in bert.parameters():
    param.requires_grad = False

class BERT_Arch(nn.Module):

    def __init__(self, bert):
      
      super(BERT_Arch, self).__init__()

      self.bert = bert 
      
      # dropout layer
      self.dropout = nn.Dropout(0.1)
      
      # relu activation function
      self.relu =  nn.ReLU()

      # dense layer 1
      self.fc1 = nn.Linear(768,512)
      
      # dense layer 2 (Output layer)
      self.fc2 = nn.Linear(512,2)

      #softmax activation function
      self.softmax = nn.LogSoftmax(dim=1)

    #define the forward pass
    def forward(self, sent_id, mask):

      #pass the inputs to the model  
      _, cls_hs = self.bert(sent_id, attention_mask=mask)
      
      x = self.fc1(cls_hs)

      x = self.relu(x)

      x = self.dropout(x)

      # output layer
      x = self.fc2(x)
      
      # apply softmax activation
      x = self.softmax(x)

      return x

# pass the pre-trained BERT to our define architecture
model = BERT_Arch(bert)

# push the model to GPU
model = model.to(device)

# optimizer from hugging face transformers
from transformers import AdamW

# define the optimizer
optimizer = AdamW(model.parameters(),
                  lr = 1e-5)

from sklearn.utils.class_weight import compute_class_weight

#compute the class weights
class_wts = compute_class_weight('balanced', np.unique(train_class), train_class)

print(class_wts)
weights= torch.tensor(class_wts,dtype=torch.float)
weights = weights.to(device)

# loss function
cross_entropy  = nn.NLLLoss(weight=weights) 

# number of training epochs
epochs = 10

# function to train the model
def train():
  
  model.train()

  total_loss, total_accuracy = 0, 0
  
  # empty list to save model predictions
  total_preds=[]
  
  # iterate over batches
  for step,batch in enumerate(train_dataloader):
    
    # progress update after every 50 batches.
    if step % 50 == 0 and not step == 0:
      print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(train_dataloader)))

    # push the batch to gpu
    batch = [r.to(device) for r in batch]
 
    sent_id, mask, labels = batch

    # clear previously calculated gradients 
    model.zero_grad()        

    # get model predictions for the current batch
    preds = model(sent_id, mask)

    # compute the loss between actual and predicted values
    loss = cross_entropy(preds, labels)

    # add on to the total loss
    total_loss = total_loss + loss.item()

    # backward pass to calculate the gradients
    loss.backward()

    # clip the the gradients to 1.0. It helps in preventing the exploding gradient problem
    torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

    # update parameters
    optimizer.step()

    # model predictions are stored on GPU. So, push it to CPU
    preds=preds.detach().cpu().numpy()

    # append the model predictions
    total_preds.append(preds)

  # compute the training loss of the epoch
  avg_loss = total_loss / len(train_dataloader)
  
  # predictions are in the form of (no. of batches, size of batch, no. of classes).
  # reshape the predictions in form of (number of samples, no. of classes)
  total_preds  = np.concatenate(total_preds, axis=0)

  #returns the loss and predictions
  return avg_loss, total_preds

# function for evaluating the model
def evaluate():
  
  print("\nEvaluating...")
  
  # deactivate dropout layers
  model.eval()

  total_loss, total_accuracy = 0, 0
  
  # empty list to save the model predictions
  total_preds = []

  # iterate over batches
  for step,batch in enumerate(val_dataloader):
    
    # Progress update every 50 batches.
    if step % 50 == 0 and not step == 0:
      
      # Calculate elapsed time in minutes.
      elapsed = format_time(time.time() - t0)
            
      # Report progress.
      print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(val_dataloader)))

    # push the batch to gpu
    batch = [t.to(device) for t in batch]

    sent_id, mask, labels = batch
    with torch.no_grad():
          
          # model predictions
          preds = model(sent_id, mask)

          # compute the validation loss between actual and predicted values
          loss = cross_entropy(preds,labels)

          total_loss = total_loss + loss.item()

          preds = preds.detach().cpu().numpy()

          total_preds.append(preds)

      # compute the validation loss of the epoch
  avg_loss = total_loss / len(val_dataloader) 

      # reshape the predictions in form of (number of samples, no. of classes)
  total_preds  = np.concatenate(total_preds, axis=0)

  return avg_loss, total_preds

# set initial loss to infinite
best_valid_loss = float('inf')

# empty lists to store training and validation loss of each epoch
train_losses=[]
valid_losses=[]

#for each epoch
for epoch in range(epochs):
     
    print('\n Epoch {:} / {:}'.format(epoch + 1, epochs))
    
    #train model
    train_loss, _ = train()
    
    #evaluate model
    valid_loss, _ = evaluate()
    
    #save the best model
    if valid_loss < best_valid_loss:
        best_valid_loss = valid_loss
        torch.save(model.state_dict(), 'saved_weights.pt')
    
    # append training and validation loss
    train_losses.append(train_loss)
    valid_losses.append(valid_loss)
    
    print(f'\nTraining Loss: {train_loss:.3f}')
    print(f'Validation Loss: {valid_loss:.3f}')

#load weights of best model
path = 'saved_weights.pt'
model.load_state_dict(torch.load(path))

import os
test_data_path =os.path.join(script_dir, "RequirementsData/requirements_tags_test.xlsx")
test_data_path

test_df = pd.read_excel(test_data_path)

test_df.head()

# tokenize and encode sequences in the test set
tokens_test = tokenizer.batch_encode_plus(
    test_df['Requirements'].tolist(),
    truncation=True,
    max_length = 25,
    padding =True

)

test_seq = torch.tensor(tokens_test['input_ids'])
test_mask = torch.tensor(tokens_test['attention_mask'])
test_y = torch.tensor(test_df['Req_type_test'].tolist())

# get predictions for test data
with torch.no_grad():
  preds = model(test_seq.to(device), test_mask.to(device))
  preds = preds.detach().cpu().numpy()

# model's performance
preds = np.argmax(preds, axis = 1)
print(classification_report(test_y, preds))

# confusion matrix
pd.crosstab(test_y, preds)

# for test set
test_labels = test_df['Req_type_test']
test_seq = torch.tensor(tokens_test['input_ids'])
test_mask = torch.tensor(tokens_test['attention_mask'])
test_y = torch.tensor(test_labels.tolist())

# split train dataset into train, validation and test sets
train_reqs, val_reqs, train_class, val_class = train_test_split(df_train['Requirements'], df_train['Req_type'], 
                                                                    random_state=2018, 
                                                                    test_size=0.2, 
                                                                stratify=df_train['Req_type'])

